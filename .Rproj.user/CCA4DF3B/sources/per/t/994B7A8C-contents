### Von Neumann Entropy:

vn.entropy <- function(data, structure){
  library(qgraph)
  if(!is.matrix(data)){
    cor1 <- cor_auto(data)/sqrt(ncol(data))
    eigen.cor1 <- eigen(cor1)$values
    l.eigen <- eigen.cor1*log(eigen.cor1)
    h.vn <- -(sum(l.eigen))

    n <- max(structure)
    cor.fact <- vector("list")
    eigen.fact <- vector("list")
    l.eigen.fact <- vector("list")
    h.vn.fact <- vector("list")
    for(i in 1:n){
      cor.fact[[i]] <- cor_auto(data[,which(structure==unique(structure)[i])])/sqrt(ncol(data))
      eigen.fact[[i]] <- eigen(cor.fact[[i]])$values
      l.eigen.fact[[i]] <- eigen.fact[[i]]*log(eigen.fact[[i]])
      h.vn.fact[[i]] <- -(sum(l.eigen.fact[[i]]))
    }

  } else{
    cor1 <- data/sqrt(ncol(data))
    eigen.cor1 <- eigen(cor1)$values
    l.eigen <- eigen.cor1*log(eigen.cor1)
    h.vn <- -(sum(l.eigen))

    n <- max(structure)
    cor.fact <- vector("list")
    eigen.fact <- vector("list")
    l.eigen.fact <- vector("list")
    h.vn.fact <- vector("list")
    for(i in 1:n){
      cor.fact[[i]] <- data[which(structure==unique(structure)[i]),which(structure==unique(structure)[i])]/sqrt(ncol(data))
      eigen.fact[[i]] <- eigen(cor.fact[[i]])$values
      l.eigen.fact[[i]] <- eigen.fact[[i]]*log(eigen.fact[[i]])
      h.vn.fact[[i]] <- -(sum(l.eigen.fact[[i]]))
    }
  }

  h.vn.fact2 <- unlist(h.vn.fact)

  #minimum entropy
  Hmin <- h.vn/ncol(data)

  # Difference between Max and Min:
  Hdiff <- h.vn-Hmin

  results <- vector("list")
  results$Tot.Entropy.VN <- h.vn
  results$Fact.Entropy <- h.vn.fact2
  results$Sum.Fact.Entropy <- sum(h.vn.fact2)
  results$Entropy.Fit <-(mean(h.vn.fact2)-h.vn)-(Hdiff*(sqrt(n)))
  results$Tot.Cor <- sum(h.vn.fact2)-h.vn
  results$Average.Entropy <- mean(h.vn.fact2)-h.vn
  return(results)
}


## VN entropy of a scaled correlation matrix!!!!!!

