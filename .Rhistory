document()
library(EGAnet)
dyn.group <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "group", model = "glasso", ncores = 2)
plot(dyn.group, nrow = 2, ncol = 2)
library(EGAnet)
document()
library(EGAnet)
document()
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE, plot = "GGally")
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE, plot = "qgraph")
document()
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE, plot = "qgraph")
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE, plot = "GGally")
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
plot(ega.wmt2)
document()
library(EGAnet)
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
ega.wmt2$Plot.EGA
plot(ega.wmt2)
source('~/.active-rstudio-document', echo=TRUE)
document()
document()
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE, plot = "qgraph")
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
plot(ega.wmt2)
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
dyn.random
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
library(EGAnet)
library(devtools)
document()
document()
library(EGAnet)
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
document()
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
document()
library(EGAnet)
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
document()
library(EGAnet)
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
document()
library(devtools)
document()
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
library(EGAnet)
document()
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
ega.wmt2$Plot.EGA
plot(ega.wmt2)
plot(ega.wmt2, visze = 10)
# bootEGA glasso example
boot.wmt <- bootEGA(data = wmt, n = 100, typicalStructure = TRUE,
plot.typicalStructure = TRUE, model = "glasso", type = "parametric", ncores = 4)
# Load data
wmt <- wmt2[,7:24]
# bootEGA glasso example
boot.wmt <- bootEGA(data = wmt, n = 100, typicalStructure = TRUE,
plot.typicalStructure = TRUE, model = "glasso", type = "parametric", ncores = 4)
boot.wmt$plot.typical.ega
plot(boot.wmt)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
dyn.group <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "group", model = "glasso", ncores = 2)
plot(dyn.group, nrow = 2, ncol = 2)
document()
library(devtools)
library(EGAnet)
dyn.group <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "group", model = "glasso", ncores = 2)
plot(dyn.group, nrow = 2, ncol = 2)
document()
document()
library(EGAnet)
library(EGAnet)
library(EGAnet)
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
ega.wmt2$Plot.EGA
# Load data
wmt <- wmt2[,7:24]
# bootEGA glasso example
boot.wmt <- bootEGA(data = wmt, n = 100, typicalStructure = TRUE,
plot.typicalStructure = TRUE, model = "glasso", type = "parametric", ncores = 4)
boot.wmt$plot.typical.ega
plot(boot.wmt)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random)
dyn.group <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "group", model = "glasso", ncores = 2)
plot(dyn.group, nrow = 2, ncol = 2)
plot(dyn.group, nrow = 2, ncol = 2)
dyn.group$dynEGA[[1]]$network
plot(dyn.group)
plot(dyn.group, nrow = 2)
plot(dyn.group, nrow = 1, ncol = 2)
plot(dyn.group, nrow = 1, ncol = 2, plot = "qgraph")
plot(dyn.group, nrow = 1, ncol = 2, plot = "GGally")
?ggarrange
??ggarrange
document()
library(devtools)
document()
library(EGAnet)
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
plot(dyn.random, ncol = 2, nrow = 1)
plot(dyn.random, ncol = 2, nrow = 1)
document()
dyn.random <- dynEGA(data = sim.dynEGA, n.embed = 5, tau = 1,
delta = 1, id = 21, group = 22, use.derivatives = 1,
level = "population", model = "glasso", ncores = 2)
library(EGAnet)
plot(dyn.random, ncol = 2, nrow = 1)
document()
library(EGAnet)
plot(dyn.group, nrow = 1, ncol = 2, plot = "GGally")
length(dyn.group)
length(dyn.group$dynEGA)
dyn.group$dynEGA
plot(dyn.group, nrow = 1, ncol = 2, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 2, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 1, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 10, plot = "GGally")
document()
library(EGAnet)
plot(dyn.random, ncol = 2, nrow = 1)
plot(dyn.random, ncol = 2, nrow = 2)
document()
library(EGAnet)
plot(dyn.random, ncol = 2, nrow = 2)
plot(dyn.random, ncol = 2, nrow = 1)
network1 <- vector("list")
for(i in 1:length(ddyn.group$dynEGA)){
network1 <- vector("list")
network1[[i]] <- network::network(x$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = x$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(x$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(x$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(x$dynEGA[[i]]$network),
ncol = ncol(x$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(x$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(x$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(x$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list")
network1[[i]] <- network::network(x$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = x$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(x$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(x$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(x$dynEGA[[i]]$network),
ncol = ncol(x$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(x$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(x$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(x$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list")
network1[[i]] <- network::network(dyn.group$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = dyn.group$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(dyn.group$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(dyn.group$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(dyn.group$dynEGA[[i]]$network),
ncol = ncol(dyn.group$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(dyn.group$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(dyn.group$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(dyn.group$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
vsize = 6
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list")
network1[[i]] <- network::network(dyn.group$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = dyn.group$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(dyn.group$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(dyn.group$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(dyn.group$dynEGA[[i]]$network),
ncol = ncol(dyn.group$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(dyn.group$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(dyn.group$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(dyn.group$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
do.call(ggpubr::ggarrange, c(plotnet[1:length(x$dynEGA)]))
do.call(ggpubr::ggarrange, c(plotnet[1:length(dyn.group$dynEGA)]))
plotnet
plotnet[[1]]
plotnet[[2]]
1:length(dyn.group$dynEGA)
network1
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list", length = length(dyn.group$dynEGA))
network1[[i]] <- network::network(dyn.group$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = dyn.group$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(dyn.group$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(dyn.group$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(dyn.group$dynEGA[[i]]$network),
ncol = ncol(dyn.group$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(dyn.group$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(dyn.group$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(dyn.group$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
plotnet
plotnet[[2]]
plotnet[[1]]
network1
dyn.group$dynEGA[[1]]$network
dyn.group$dynEGA[[2]]$network
network1[[i]] <- network::network(dyn.group$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)}
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list", length = length(dyn.group$dynEGA))
network1[[i]] <- network::network(dyn.group$dynEGA[[i]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)}
network1
dyn.group$dynEGA[[1]]$network
for(i in 1:length(dyn.group$dynEGA)){
network1 <- vector("list", length = length(dyn.group$dynEGA))
network1[[i]] <- network::network(dyn.group$dynEGA[[1]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)}
network1
network1 <- vector("list", length = length(dyn.group$dynEGA))
for(i in 1:length(dyn.group$dynEGA)){
network1[[i]] <- network::network(dyn.group$dynEGA[[1]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)}
network1
document()
library(EGAnet)
plot(dyn.random, ncol = 2, nrow = 1)
plot(dyn.random)
document()
library(EGAnet)
plot(dyn.group, nrow = 2, ncol = 10, plot = "GGally")
document()
library(EGAnet)
plot(dyn.group, nrow = 2, ncol = 10, plot = "GGally")
dyn.group$dynEGA[[1]]$network
dyn.group$dynEGA[[2]]$network
dyn.group$dynEGA[[1]]$network
vsize = 6
network1 <- vector("list", length = length(dyn.group$dynEGA))
for(i in 1:length(dyn.group$dynEGA)){
network1[[i]] <- network::network(dyn.group$dynEGA[[1]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)}
network1 <- vector("list", length = length(dyn.group$dynEGA))
for(i in 1:length(dyn.group$dynEGA)){
network1[[i]] <- network::network(dyn.group$dynEGA[[1]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = dyn.group$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(dyn.group$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(dyn.group$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(dyn.group$dynEGA[[i]]$network),
ncol = ncol(dyn.group$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(dyn.group$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(dyn.group$dynEGA[[i]]$network))
set.seed(1234)
plotnet <- vector("list")
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(dyn.group$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
do.call(ggpubr::ggarrange, c(plotnet[1:length(dyn.group$dynEGA)]))
plotnet
document()
library(EGAnet)
plot(dyn.group, nrow = 2, ncol = 10, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 10, plot = "GGally")
network1 <- vector("list", length = length(dyn.group$dynEGA))
for(i in 1:length(dyn.group$dynEGA)){
network1[[i]] <- network::network(dyn.group$dynEGA[[1]]$network,
ignore.eval = FALSE,
names.eval = "weights",
directed = FALSE)
network::set.vertex.attribute( network1[[i]] , attrname= "Communities", value = dyn.group$dynEGA[[i]]$wc)
network::set.vertex.attribute( network1[[i]] , attrname= "Names", value = network::network.vertex.names(network1[[i]]))
network::set.edge.attribute( network1[[i]] , "color", ifelse(network::get.edge.value(network1[[i]], "weights") > 0, "darkgreen", "red"))
network::set.edge.value( network1[[i]] ,attrname="AbsWeights",value=abs(dyn.group$dynEGA[[i]]$network))
network::set.edge.value(network1[[i]],attrname="ScaledWeights",
value=matrix(scales::rescale(as.vector(dyn.group$dynEGA[[i]]$network),
to = c(.001, 1.75)),
nrow = nrow(dyn.group$dynEGA[[i]]$network),
ncol = ncol(dyn.group$dynEGA[[i]]$network)))
# Layout "Spring"
graph1 <- vector("list")
edge.list <- vector("list")
layout.spring <- vector("list")
graph1[[i]] <- igraph::as.igraph(qgraph::qgraph(dyn.group$dynEGA[[i]]$network, DoNotPlot = TRUE))
edge.list[[i]] <- igraph::as_edgelist(graph1[[i]])
layout.spring[[i]] <- qgraph::qgraph.layout.fruchtermanreingold(edgelist = edge.list[[i]],
weights =
abs(igraph::E(graph1[[i]])$weight/max(abs(igraph::E(graph1[[i]])$weight)))^2,
vcount = ncol(dyn.group$dynEGA[[i]]$network))
set.seed(1234)
plotnet[[i]] <- GGally::ggnet2(network1[[i]], edge.size = "ScaledWeights", palette = "Set1",
color = "Communities", edge.color = c("color"),
alpha = 0.5, size = vsize, edge.alpha = 0.5,
mode =  layout.spring[[i]],
label.size = 2.4,
label = colnames(dyn.group$dynEGA[[i]]$network))+ggplot2::theme(legend.title = ggplot2::element_blank())
}
do.call(ggpubr::ggarrange, c(plotnet[1:length(dyn.group$dynEGA)]))
document()
library(EGAnet)
plot(dyn.group, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 1, plot = "GGally")
plot(dyn.group, nrow = 2, ncol = 1, plot = "GGally")
ega.wmt2 <- EGA(data = wmt2[,7:24], model = "glasso", plot.EGA = TRUE)
par(mfrow=c(nrow,ncol))
plot(ega.wmt2, plot = "qgraph")
plot(ega.wmt2)
ggarrange(
plot(ega.wmt2, plot = "qgraph")
plot(ega.wmt2)
)
ggarrange(
plot(ega.wmt2, plot = "qgraph")
plot(ega.wmt2),
)
document()
library(EGAnet)
??
??browseURL
??packageVersion
packageVersion("dplyr")
utils::packageVersion("EGAnet")
utils::packageDescription("EGAnet")
source('~/Dropbox/Pacotes do R/Pacote EGA/EGA-Old/R/dynEGA.R', echo=TRUE)
document()
library(EGAnet)
document()
document()
library(EGAnet)
