model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data.sim <- qgraph::cor_auto(data.sim)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network.sim <- EBICglasso.qgraph(S = cor.data.sim,
n = nrow(data.sim),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...);
if (any(NetworkToolbox::strength(estimated.network.sim)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data.sim <- NULL
estimated.network.sim <- NetworkToolbox::TMFG(data.sim, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph.sim <- NetworkToolbox::convert2igraph(abs(estimated.network.sim))
wc.sim <- igraph::walktrap.community(graph.sim, steps = steps)
names(wc.sim$membership) <- colnames(data.sim)
n.dim.sim <- max(wc.sim$membership)
if(n.dim.sim <= 2){
n.dim <- n.dim.sim
cor.data <- cor.data.sim[-c(1:J),-c(1:J)]
estimated.network <- estimated.network.sim[-c(1:J),-c(1:J)]
wc <- wc.sim$membership[-c(1:J)]
}
#-------------------------------------------------------------------------
## TRADITIONAL EGA (IF NUMBER OF FACTORS > 2)
#-------------------------------------------------------------------------
else{
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data <- qgraph::cor_auto(data)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network <- EBICglasso.qgraph(S = cor.data,
n = nrow(data),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...)
if (any(NetworkToolbox::strength(estimated.network)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data <- NULL
estimated.network <- NetworkToolbox::TMFG(data, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph <- NetworkToolbox::convert2igraph(abs(estimated.network))
wc <- igraph::walktrap.community(graph, steps = steps)
names(wc$membership) <- colnames(data)
n.dim <- max(wc$membership)
wc <- wc$membership
}
a <- list()
# Returning only communities that have at least two items:
if(length(unique(wc))>1){
indices <- seq_along(wc)
indices2 <- indices[wc %in% wc[duplicated(wc)]]
wc[indices[-indices2]] <- NA
a$n.dim <- length(unique(na.omit(wc)))
}else{
a$n.dim <- length(unique(wc))
}
a$correlation <- cor.data
a$network <- estimated.network
a$wc <- wc
dim.variables <- data.frame(items = colnames(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[, 2]),                                ]
a$dim.variables <- dim.variables
if (plot.EGA == TRUE) {
if(n.dim.sim <= 2){
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = FALSE)
}else{
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = TRUE)
}
}
a$EGA.type <- ifelse(n.dim.sim <= 2, "Unidimensional EGA", "Traditional EGA")
class(a) <- "EGA"
return(a)
}
ex1 <- EGA(wmt2[,7:14])
ex1 <- EGA(cor(wmt2[,7:14]), n = 2000)
ex1 <- EGA(cor(depression[,7:14]), n = 2000)
depression
colnames(depression)
ex1 <- EGA(cor(depression[,48:65]), n = 2000)
library(qgraph)
ex1 <- EGA(cor_auto(depression[,48:65]), n = 2000)
ex1 <- EGA(depression[,48:65], n = 2000)
ex1 <- EGA(data=cor_auto(depression[,48:65]), n = 2000)
TMFG
NetworkToolbox::TMFG
EGA <- function (data, model = c("glasso", "TMFG"), plot.EGA = TRUE, n = NULL,
steps = 4, nvar = 4, nfact = 1, load = 0.70, ...) {
#-------------------------------------------------------------------------
## CHECKING DATA STRUCTURE
#-------------------------------------------------------------------------
if(nrow(data)!=ncol(data)){
data <- as.data.frame(data)
}
if (nrow(data) == ncol(data)){
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network <- EBICglasso.qgraph(S = data,
n = n,
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...)
if (any(NetworkToolbox::strength(estimated.network)>0)) {
break
}
}
}
else if (model == "TMFG") {
estimated.network <- NetworkToolbox::TMFG(data, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph <- NetworkToolbox::convert2igraph(abs(estimated.network))
wc <- igraph::walktrap.community(graph, steps = steps)
names(wc$membership) <- colnames(data)
n.dim <- max(wc$membership)
wc <- wc$membership
}
#-------------------------------------------------------------------------
## DATA GENERATION
#-------------------------------------------------------------------------
nvar <- nvar
nfac <- nfact
n <- nrow(data)
load <- load
corf <- 0
J       = nvar*nfac
sdcross = 0
## GENERATE SAMPLE DATA MATRIX
check.eig <- TRUE
check.com <- TRUE
while(check.eig == TRUE|check.com == TRUE){
SATF = matrix(0, J, nfac)
for(j in 1:nfac){
SATF[(j*nvar-nvar+1):(j*nvar),j]<-runif(nvar, load-.10, load+.10)
if(nfac>1){
CROSS.L = base::apply(as.matrix(SATF[(j*nvar-nvar+1+2):(j*nvar),-c(j)]), ## Generate cross-loadings
2,
function(x) rnorm((nvar-2), 0, sdcross))
SATF[(j*nvar-nvar+1+2):(j*nvar),-c(j)] = CROSS.L
}
}
SATF # Population factor loading matrix with cross-loadings and marker items
FCOR      = matrix(corf, nfac, nfac); diag(FCOR)<-1 ## Factor correlation matrix
R         = SATF%*%FCOR%*%t(SATF)                          ## Rr
check.com = any(diag(R) > .90)                                  ## Check communalities values
diag(R)   = 1                                                                    ## Insert ones in the diagonal of Rr
R                                                                                       ## Rp
check.eig = any(eigen(R)$values <= 0)                      ## Check eigenvalues
}
U = chol(R)                                                                       ## Cholesky decomposition of Rp
Z = mvtnorm::rmvnorm(n, sigma = diag(J))                                  ## Obtain sample matrix of continuous variables
X = Z%*%U
X <-as.data.frame(X)
colnames(X) <- paste0("V", 1:ncol(X))
data.sim <- data.frame(X, data)
#-------------------------------------------------------------------------
## EGA WITH SIMULATED DATA + ORIGINAL DATA
#-------------------------------------------------------------------------
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data.sim <- qgraph::cor_auto(data.sim)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network.sim <- EBICglasso.qgraph(S = cor.data.sim,
n = nrow(data.sim),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...);
if (any(NetworkToolbox::strength(estimated.network.sim)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data.sim <- NULL
estimated.network.sim <- NetworkToolbox::TMFG(data.sim, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph.sim <- NetworkToolbox::convert2igraph(abs(estimated.network.sim))
wc.sim <- igraph::walktrap.community(graph.sim, steps = steps)
names(wc.sim$membership) <- colnames(data.sim)
n.dim.sim <- max(wc.sim$membership)
if(n.dim.sim <= 2){
n.dim <- n.dim.sim
cor.data <- cor.data.sim[-c(1:J),-c(1:J)]
estimated.network <- estimated.network.sim[-c(1:J),-c(1:J)]
wc <- wc.sim$membership[-c(1:J)]
}
#-------------------------------------------------------------------------
## TRADITIONAL EGA (IF NUMBER OF FACTORS > 2)
#-------------------------------------------------------------------------
else{
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data <- qgraph::cor_auto(data)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network <- EBICglasso.qgraph(S = cor.data,
n = nrow(data),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...)
if (any(NetworkToolbox::strength(estimated.network)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data <- NULL
estimated.network <- NetworkToolbox::TMFG(data, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph <- NetworkToolbox::convert2igraph(abs(estimated.network))
wc <- igraph::walktrap.community(graph, steps = steps)
names(wc$membership) <- colnames(data)
n.dim <- max(wc$membership)
wc <- wc$membership
}
a <- list()
# Returning only communities that have at least two items:
if(length(unique(wc))>1){
indices <- seq_along(wc)
indices2 <- indices[wc %in% wc[duplicated(wc)]]
wc[indices[-indices2]] <- NA
a$n.dim <- length(unique(na.omit(wc)))
}else{
a$n.dim <- length(unique(wc))
}
a$correlation <- cor.data
a$network <- estimated.network
a$wc <- wc
dim.variables <- data.frame(items = colnames(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[, 2]),                                ]
a$dim.variables <- dim.variables
if (plot.EGA == TRUE) {
if(n.dim.sim <= 2){
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = FALSE)
}else{
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = TRUE)
}
}
a$EGA.type <- ifelse(n.dim.sim <= 2, "Unidimensional EGA", "Traditional EGA")
class(a) <- "EGA"
return(a)
}
ex1 <- EGA(data=cor_auto(depression[,48:65]), n = 2000)
EGA <- function (data, model = c("glasso", "TMFG"), plot.EGA = TRUE, n = NULL,
steps = 4, nvar = 4, nfact = 1, load = 0.70, ...) {
#-------------------------------------------------------------------------
## CHECKING DATA STRUCTURE
#-------------------------------------------------------------------------
if(nrow(data)!=ncol(data)){
data <- as.data.frame(data)
}
if (nrow(data) == ncol(data)){
cor.data <- data
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network <- EBICglasso.qgraph(S = cor.data,
n = n,
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...)
if (any(NetworkToolbox::strength(estimated.network)>0)) {
break
}
}
}
else if (model == "TMFG") {
estimated.network <- NetworkToolbox::TMFG(cor.data, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph <- NetworkToolbox::convert2igraph(abs(estimated.network))
wc <- igraph::walktrap.community(graph, steps = steps)
names(wc$membership) <- colnames(data)
n.dim <- max(wc$membership)
wc <- wc$membership
} else{
#-------------------------------------------------------------------------
## DATA GENERATION
#-------------------------------------------------------------------------
nvar <- nvar
nfac <- nfact
n <- nrow(data)
load <- load
corf <- 0
J       = nvar*nfac
sdcross = 0
## GENERATE SAMPLE DATA MATRIX
check.eig <- TRUE
check.com <- TRUE
while(check.eig == TRUE|check.com == TRUE){
SATF = matrix(0, J, nfac)
for(j in 1:nfac){
SATF[(j*nvar-nvar+1):(j*nvar),j]<-runif(nvar, load-.10, load+.10)
if(nfac>1){
CROSS.L = base::apply(as.matrix(SATF[(j*nvar-nvar+1+2):(j*nvar),-c(j)]), ## Generate cross-loadings
2,
function(x) rnorm((nvar-2), 0, sdcross))
SATF[(j*nvar-nvar+1+2):(j*nvar),-c(j)] = CROSS.L
}
}
SATF # Population factor loading matrix with cross-loadings and marker items
FCOR      = matrix(corf, nfac, nfac); diag(FCOR)<-1 ## Factor correlation matrix
R         = SATF%*%FCOR%*%t(SATF)                          ## Rr
check.com = any(diag(R) > .90)                                  ## Check communalities values
diag(R)   = 1                                                                    ## Insert ones in the diagonal of Rr
R                                                                                       ## Rp
check.eig = any(eigen(R)$values <= 0)                      ## Check eigenvalues
}
U = chol(R)                                                                       ## Cholesky decomposition of Rp
Z = mvtnorm::rmvnorm(n, sigma = diag(J))                                  ## Obtain sample matrix of continuous variables
X = Z%*%U
X <-as.data.frame(X)
colnames(X) <- paste0("V", 1:ncol(X))
data.sim <- data.frame(X, data)
#-------------------------------------------------------------------------
## EGA WITH SIMULATED DATA + ORIGINAL DATA
#-------------------------------------------------------------------------
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data.sim <- qgraph::cor_auto(data.sim)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network.sim <- EBICglasso.qgraph(S = cor.data.sim,
n = nrow(data.sim),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...);
if (any(NetworkToolbox::strength(estimated.network.sim)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data.sim <- NULL
estimated.network.sim <- NetworkToolbox::TMFG(data.sim, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph.sim <- NetworkToolbox::convert2igraph(abs(estimated.network.sim))
wc.sim <- igraph::walktrap.community(graph.sim, steps = steps)
names(wc.sim$membership) <- colnames(data.sim)
n.dim.sim <- max(wc.sim$membership)
if(n.dim.sim <= 2){
n.dim <- n.dim.sim
cor.data <- cor.data.sim[-c(1:J),-c(1:J)]
estimated.network <- estimated.network.sim[-c(1:J),-c(1:J)]
wc <- wc.sim$membership[-c(1:J)]
}
#-------------------------------------------------------------------------
## TRADITIONAL EGA (IF NUMBER OF FACTORS > 2)
#-------------------------------------------------------------------------
else{
if (missing(model)) {
model = "glasso"
}
else {
model = match.arg(model)
}
if (model == "glasso") {
cor.data <- qgraph::cor_auto(data)
gamma.values <- c(0.50, 0.25, 0)
gvals <- iterators::iter(gamma.values)
repeat {
estimated.network <- EBICglasso.qgraph(S = cor.data,
n = nrow(data),
lambda.min.ratio = 0.1,
returnAllResults = FALSE,
gamma = iterators::nextElem(gvals), ...)
if (any(NetworkToolbox::strength(estimated.network)>0)) {
break
}
}
}
else if (model == "TMFG") {
cor.data <- NULL
estimated.network <- NetworkToolbox::TMFG(data, normal = TRUE,
na.data = "pairwise", ...)$A
}
graph <- NetworkToolbox::convert2igraph(abs(estimated.network))
wc <- igraph::walktrap.community(graph, steps = steps)
names(wc$membership) <- colnames(data)
n.dim <- max(wc$membership)
wc <- wc$membership
}
}
a <- list()
# Returning only communities that have at least two items:
if(length(unique(wc))>1){
indices <- seq_along(wc)
indices2 <- indices[wc %in% wc[duplicated(wc)]]
wc[indices[-indices2]] <- NA
a$n.dim <- length(unique(na.omit(wc)))
}else{
a$n.dim <- length(unique(wc))
}
a$correlation <- cor.data
a$network <- estimated.network
a$wc <- wc
dim.variables <- data.frame(items = colnames(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[, 2]),                                ]
a$dim.variables <- dim.variables
if (plot.EGA == TRUE) {
if(n.dim.sim <= 2){
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = FALSE)
}else{
plot.ega <- qgraph::qgraph(a$network, layout = "spring",
vsize = 6, groups = as.factor(a$wc), label.prop = 1, legend = TRUE)
}
}
a$EGA.type <- ifelse(n.dim.sim <= 2, "Unidimensional EGA", "Traditional EGA")
class(a) <- "EGA"
return(a)
}
ex1 <- EGA(data=cor_auto(depression[,48:65]), n = 2000)
ex1 <- EGA(depression[,48:65])
ex1
ex1$EGA.type
?rowSums
sessionInfo()
library(EGAnet)
ega.wmt <- EGA(data = wmt2[,7:24], model = "TMFG", plot.EGA = TRUE)
summary(ega.wmt)
plot(ega.wmt)
ega.intel <- EGA(data = intelligenceBattery[,8:66], model = "glasso", plot.EGA = TRUE)
ega.intel$EGA.type
library(devtools)
document()
document()
library(devtools)
document()
??matrix.trace
library(matrixcalc)
session_info()
session_info()
library(EGAnet)
library(psych)
citation("psych")
library(EGAnet)
str(intelligenceBattery)
colnames(intelligenceBattery)
summary(intelligenceBattery)
colnames(intelligenceBattery[,8:66])
colnames(intelligenceBattery[,8:67])
colnames(intelligenceBattery[,8:66])
colnames(intelligenceBattery[,1:66])
summary(intelligenceBattery[,1:7])
sd(intelligenceBattery[,5])
sd(intelligenceBattery[,5], na.rm = TRUE)
