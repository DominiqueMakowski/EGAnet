% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rng.R
\name{rng}
\alias{rng}
\alias{RNG}
\title{Random Number Generation in \code{\link{EGAnet}}}
\usage{
rng()
}
\description{
Random number generation is important and some methods
are better than others. In \code{\link{EGAnet}}, there are two
cases where random number generation is used: bootstrapping and
permutating cases or variables. For permutated and non-parametric
bootstrapping, \code{\link[base]{sample}} is the go-to in R; for
random normal value generation (e.g., parametric bootstrapping),
\code{\link[stats]{rnorm}} is the default.
}
\details{
\strong{EGAnet Random Number Generation}

\code{\link{EGAnet}} uses two random number generation methods
that are based in C that are openly shared by the authors of
the methods. Using non-R defaults serves two purposes: (1)
reproducible results that do not affect R's RNG and (2)
statistical quality.

\strong{Random Numbers}

To generate random integer values (like \code{\link[stats]{runif}}),
\code{\link{EGAnet}} uses the \strong{xoshiro128++} algorithm (Blackman & Vigna, 2022), 
which is a 32-bit generator (smaller, more compact than 64-bit 
and slightly faster). The authors of the method state that it 
passes all known randomness tests.

The xoshiro128++ is used to generate seeds based on a single seed
to produce reproducible results. It is also used to perform similar
functions to R's \code{\link[base]{sample}}. Here's a breakdown 
comparing xoshiro128++ to \code{sample}
(median value across 1000 runs are shown):

\itemize{

\item{length = 10:}
{xoshiro = 1.401 microseconds; \code{sample} = 4.601 microseconds}

\item{length = 100:}
{xoshiro = 2.702 microseconds; \code{sample} = 8.901 microseconds}

\item{length = 1000:}
{xoshiro = 16.701 microseconds; \code{sample} = 50.901 microseconds}

\item{length = 10000:}
{xoshiro = 41.202 microseconds; \code{sample} = 525.701 microseconds}

}

Results are largely similar (albeit faster) for resampling with replacement

\strong{Random Normal}

To generate random normal values (like \code{\link[stats]{rnorm}}),
\code{\link{EGAnet}} uses the \strong{Ziggurat} algorithm (Marsaglia & Tsang, 2000).
The Ziggurat method uses rectangles and trapezoids under the random
normal distribution to generate random normal data. In short,
the method is extremely fast and produces robust results. Here's a 
breakdown comparing Ziggurat to \code{rnorm}
(median value across 1000 runs are shown):

\itemize{

\item{length = 10:}
{Ziggurat = 13.701 microseconds; \code{rnorm} = 1.527 microseconds}

\item{length = 100:}
{Ziggurat = 14.501 microseconds; \code{rnorm} = 4.201 microseconds}

\item{length = 1000:}
{Ziggurat = 20.601 microseconds; \code{rnorm} = 33.700 microseconds}

\item{length = 10000:}
{Ziggurat = 93.701 microseconds; \code{rnorm} = 339.851 microseconds}

}

The Ziggurat method is slower than \code{rnorm} when there are few
values generated but shifts after about the 500 values to
being much, much faster than \code{rnorm}. In \code{\link{EGAnet}}, 
random normal values are generated for parametric bootstrapping in
\code{\link[EGAnet]{bootEGA}}. The equivalent timing at about 500 values
would be for a dataset with 50 cases and 10 variables.
Because there are so few circumstances that fewer than 500 values 
will need to be generated in \code{\link[EGAnet]{bootEGA}}, the
Ziggurat method is the clear favorite for computational speed.

\strong{Setting Seeds}

When functions in \code{\link{EGAnet}} have a \code{seed} argument,
the single seed is passed to the xoshiro128++ algorithm, which 
then generates \emph{n} random integers. The single seed is used to set 
xoshiro128++ random number generation in C. Because the seed is set 
in C, the random number generation does not affect R's random number generation.

These \emph{n} values are then used as seeds in either the xoshiro128++
(resampling) or Ziggurat (parametric) algorithms. The seeds generated by
the xoshiro128++ algorithm will always be the same given the starting
single seed. This procedure allows the reproducibility of \emph{n} values and
therefore \emph{n} states that are used to generate "random" data. Of course,
the data aren't really random; however, the goal is to provide
a form of pseudorandom generation that is reproducible (oxymoron).

When \code{seed = 0} or \code{seed = NULL}, then results will \emph{not} be
reproducible. The seed used in RNG will instead be the current computer's
clock time in nanoseconds. Therefore, unless you know the nanosecond your
computer used when generating random numbers or you do the analysis down
to the exact nanosecond of the next day (or days thereafter), your results
will vary.
}
\examples{
# Print algorithm information
rng()

}
\references{
\strong{xoshiro128++} \cr
Blackman, D., & Vigna, S. (2022).
Scrambled linear pseudorandom number generators.
\emph{arXiv}.

\strong{Ziggurat} \cr
Marsaglia, G., & Tsang, W. W. (2000).
The Ziggurat method for generating random variables.
\emph{Journal of Statistical Software}, \emph{5}(8), 1-7.
}
